import numpy as np
from pylab import rcParams
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib.ticker import FormatStrFormatter
import re

from matplotlib import rcParams
import matplotlib as mpl
mpl.rcParams.update({'font.size': 13})
mpl.rcParams['pdf.fonttype'] = 42
mpl.rcParams['ps.fonttype'] = 42

# sns.set_style("white")
style_label = "default"

green = "mediumseagreen"
red = "salmon"
blue = "steelblue"

# def bar_figure1(ax):
#     y_pos = [0.38, 1.56, 1.80, 2.14, 2.48]
#     n_groups = [1, 4, 8, 16, 32]
#     index = np.arange(len(n_groups))
#     width = 0.4
#     ax.bar(index, y_pos, width, align='center', color="lightblue") #'#B9E0A5'
#     # ax.set_yticks(y_pos)
#     ax.set_xticks(index)
#     ax.set_xticklabels(n_groups)
#     # ax.set_xlabel('Performance')
#     ax.set_title('Dispatch delay of different patch number', pad=10)
#     ax.set_ylim(ymin=0, ymax=3)
#     ax.set_xlabel("(a)") 

# cgs = ["PA", "SECPA", "SPA", "EA", "TA", "RRC", "UWA", "IC", "PMA", "CC", "Misc"]
# cg_dict = {"PA":"PA", "SA":"SECPA", "SECPA":"SECPA", "SPA":"SPA", "Security_Purchase":"SECPA", "agreement_of_plan_and_merger":"PMA",
#             "agreements":"Misc", "credit_contract":"CC", "employ_agreement":"EA", "indenture_contracts":"IC", "registration_rights_contracts":"RRC",
#                 "trust_agreement":"TA", "underwriting_agreements":"UWA"}

cgs = ["CC", "EA", "IC", "PMA", "RRC", "SECPA", "TA", "Mini-bench"]
cg_dict = {"PA":"Mini-bench", "SA":"Mini-bench", "SECPA":"Mini-bench", "SPA":"Mini-bench", "Security_Purchase":"SECPA", "agreement_of_plan_and_merger":"PMA",
            "credit_contract":"CC", "employ_agreement":"EA", "indenture_contracts":"IC", "registration_rights_contracts":"RRC",
                "trust_agreement":"TA"}

gen_tc_num = []
gt_tc_num = []

with open("test_case_num.txt", "r", encoding="utf-8") as ifile:
    lines = ifile.readlines()
    for line in lines:
        line.strip("\n")
        nums = line.split(" ")
        gen_tc_num.append(int(nums[0]))
        gt_tc_num.append(int(nums[1]))

def line_figure1(ax):
    global delays, delays1
    # delays = np.array([103,117,131,137,145,151,154,159,162,167,170,173,175,178,179,181,184])
    # delays = delays / 100
    index = [x+1 for x in range(len(gt_tc_num))]
    ax.plot(index, gt_tc_num, marker='d', markersize=4 , color='steelblue')
    ax.plot(index, gen_tc_num, marker='*', markersize=4 , color='red')
    
    # ax.set_yticks(y_pos)
    ax.set_xticks(range(1,len(gt_tc_num) + 1,1))
    ax.set_xticklabels(range(1,len(gt_tc_num) + 1,1), fontsize=14)
    # ax.set_xticklabels(0,173,175,178,179,181,184])
    ax.set_xlabel('Legal Contract Index')
    ax.set_ylabel("Test Case Amount")
    # ax.set_yscale('log')
    # ax.set_title('Dispatch delay of different patch number', pad=10)
    ax.set_ylim(ymin=0, ymax=600)
    # ax.set_xlabel("(a) Dispatch delay of various patch numbers") 
    ax.xaxis.labelpad = 8
    ax.legend(('Ground Truth test case','Generated test case' ),
        loc='upper left', ncol=1)

def bar_figure_gumtree(ax):
    global cgs
    plt.sca(ax)
    action_nums = []
    for i in range(len(cgs)):
        action_nums.append([])
    with open("data/gumtree.txt", "r", encoding="utf-8") as ifile:
        lines = ifile.readlines()
        lines = lines[2:]
        lines.sort()
        
        for line in lines:
            line = line.replace(" ","")
            line = line.strip("\n")
            segs = [x for x in line.split("|") if x]
            # print(segs)
            segs[0] = re.sub('[0-9]', "", segs[0].split("-")[0])
            if segs[0] in cg_dict and cg_dict[segs[0]] in cgs:
                action_nums[cgs.index(cg_dict[segs[0]])].append(int(segs[1]))

    begin = 1
    tick_pos = []
    for cur_action_nums in action_nums:
        tick_pos.append(begin + len(cur_action_nums)/2)
        ax.axvline(begin-0.75, color='black', linestyle='dashed', linewidth=0.5)
        index = [x+begin for x in range(len(cur_action_nums))]
        ax.bar(index, cur_action_nums, width=1 , color='steelblue', linewidth=0.01, alpha=0.65)
        begin += len(cur_action_nums)
        
    # ax.set_yticks(y_pos)
    ax.set_xticks(tick_pos)
    ax.set_xticklabels(cgs, fontsize=10)
    ax.tick_params(axis='both', which='both', length=0)
    # for tick in ax.xaxis.get_majorticklabels():
    #     tick.set_horizontalalignment("left")
    # ax.set_xticklabels(0,173,175,178,179,181,184])
    ax.set_xlabel('GumTreeDiff Edit Action Num')
    ax.set_ylabel("Action Num")
    # ax.set_yscale('log')
    # ax.set_title('Dispatch delay of different patch number', pad=10)
    # ax.set_ylim(ymin=0, ymax=600)
    # # ax.set_xlabel("(a) Dispatch delay of various patch numbers") 
    # ax.xaxis.labelpad = 8
    # ax.legend(('Ground Truth test case','Generated test case' ),
    #     loc='upper left', ncol=1)
    

def bar_figure_vec_cosines(ax):
    global cgs
    plt.sca(ax)
    vec_cosines = []
    for i in range(len(cgs)):
        vec_cosines.append([])
    with open("data/vec-cosine.txt", "r", encoding="utf-8") as ifile:
        lines = ifile.readlines()
        lines = lines[2:]
        lines.sort()
        for line in lines:
            line = line.replace(" ","")
            line = line.strip("\n")
            segs = [x for x in line.split("|") if x]
            # print(segs)
            segs[0] = re.sub('[0-9]', "", segs[0].split("-")[0])
            if segs[0] in cg_dict and cg_dict[segs[0]] in cgs:
                vec_cosines[cgs.index(cg_dict[segs[0]])].append(1.0 - float(segs[1]))

    # index = [x+1 for x in range(len(vec_cosines))]
    # ax.bar(index, vec_cosines, width=1 , color='steelblue')
    
    begin = 1
    tick_pos = []
    for cur_vec_cosines in vec_cosines:
        tick_pos.append(begin + len(cur_vec_cosines)/2)
        ax.axvline(begin-0.75, color='black', linestyle='dashed', linewidth=0.5)
        index = [x+begin for x in range(len(cur_vec_cosines))]
        ax.bar(index, cur_vec_cosines, width=1 , color='orange', linewidth=0.01, alpha=0.65)
        begin += len(cur_vec_cosines)
        
    # ax.set_yticks(y_pos)
    ax.set_xticks(tick_pos)
    ax.set_xticklabels(cgs, fontsize=10)
    ax.tick_params(axis='both', which='both', length=0)

    # ax.set_yticks(y_pos)
    # ax.set_xticks(range(1,len(action_nums) + 1,1))
    # ax.set_xticklabels(range(1,len(action_nums) + 1,1), fontsize=14)
    # ax.set_xticklabels(0,173,175,178,179,181,184])
    ax.set_xlabel('Deckard Characteristic Vector Cosine Similarity')
    ax.set_ylabel("1 - Cosine")
    # ax.set_yscale('log')
    # ax.set_title('Dispatch delay of different patch number', pad=10)
    ax.set_ylim(ymin=0, ymax=0.01)
    # ax.yaxis.set_major_formatter(FormatStrFormatter('%.2f'))
    # # ax.set_xlabel("(a) Dispatch delay of various patch numbers") 
    # ax.xaxis.labelpad = 8
    # ax.legend(('Ground Truth test case','Generated test case' ),
    #     loc='upper left', ncol=1)
    


    

# def stacked_figure3(ax):
#     N = 5
#     Triggering = [3.9] * N
#     Dispatching = [0.5] * N
#     Executing = [1.7, 1.6, 2.0, 1.5, 4.4]
#     ind = np.arange(N)    # the x locations for the groups
#     width = 0.35       # the width of the bars: can also be len(x) sequence

#     B1 = [0] * N
#     B2 = [0] * N
#     for i in range(N):
#         B1[i] = Triggering[i]
#         B2[i] = B1[i] + Dispatching[i]

#     p1 = ax.bar(ind, Triggering, width, color= green) #'#B9E0A5'
#     p2 = ax.bar(ind, Dispatching, width, bottom=B1, color=red) #'#F19C99'
#     p3 = ax.bar(ind, Executing, width, bottom=B2, color=blue) #'#A9C4EB'

#     # ax.set_ylabel('Scores')
#     ax.set_title('Total patch delay for different CVEs')
#     ax.set_xticks(ind)
#     ax.set_xticklabels(['C1', 'C2', 'C4', 'C5', 'C6'])
#     ax.set_yticks(np.arange(0, 14, 2))
#     ax.legend(('Triggering', 'Dispatching', 'Executing'),
#         loc='upper left', mode='expand', ncol=3)




def draw_figure():
    (fig_width, fig_height) = plt.rcParams['figure.figsize']
    fig_size = [fig_width, fig_height / 1.1 ]
    fig, axes = plt.subplots(ncols=1, nrows=2, num=style_label,
                             figsize=fig_size, squeeze=True)
    # axes[1].set_ylabel("Total Patch Delay (Î¼s)")
    # line_figure1(axes[0])
    bar_figure_gumtree(axes[0])
    plt.yticks(fontsize=10, rotation=45)
    bar_figure_vec_cosines(axes[1])
    plt.yticks(fontsize=10, rotation=45)
    plt.subplots_adjust(left=0.12, bottom=0.12, right=0.98, top=0.97, wspace=0.23, hspace=0.4)
    # plt.yscale("log")
    fig.align_labels()
    plt.show()
    fig.savefig("RQ1-syntactic.pdf")

draw_figure()